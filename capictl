#!/bin/bash
set -o errexit -o pipefail

function usage() {
    echo "Usage: $0 [flags]"
    echo
    echo "    -n <name>               - The name of the cluster (required)"
    echo "    -v <version>            - The Kubernetes version to use (default to latest version)"
    echo "    -b <bootstrap-provider> - Valid values for the bootstrap cluster provider are 'kind', 'vm-kind', 'k3d' (defaults to 'kind')"
    echo "    -i <workload-provider>  - Valid values for the infrastructure provider are 'hetzner', 'vsphere', 'docker' (defaults to 'docker')"
    echo "    -p <cni-plugin>         - Valid values for the CNI plugin are 'cilium' (defaults to 'cilium')"
    echo "    -x <cidr>               - The pod CIDR to use (defaults to 10.42.18.0/17)"
    echo "    -y <cidr>               - The service CIDR to use (defaults to 10.42.0.0/17)"
    echo "    -c <count>              - The number of control plane nodes (defaults to 1)"
    echo "    -w <count>              - The number of worker nodes (defaults to 2)"
    echo "    -t                      - Interrupt after the cluster template was generated"
    echo "    -o                      - Read authentication configuration from authentication-config.yaml"
    exit 1
}

while getopts "n:v:b:i:p:c:w:tro" o; do
    case "${o}" in
        n)
            CLUSTER_NAME="${OPTARG}"
            ;;
        v)
            KUBERNETES_VERSION="${OPTARG}"
            ;;
        b)
            BOOTSTRAP_CLUSTER_PROVIDER="${OPTARG}"
            ;;
        i)
            INFRASTRUCTURE_PROVIDER="${OPTARG}"
            ;;
        p)
            CNI_PLUGIN="${OPTARG}"
            ;;
        x)
            POD_CIDR="${OPTARG}"
            ;;
        y)
            SERVICE_CIDR="${OPTARG}"
            ;;
        c)
            CONTROL_PLANE_NODE_COUNT="${OPTARG}"
            ;;
        w)
            WORKER_NODE_COUNT="${OPTARG}"
            ;;
        t)
            BREAK_AFTER_CLUSTER_TEMPLATE=true
            ;;
        r)
            REUSE_CLUSTER_YAML=true
            ;;
        o)
            OIDC_AUTH=true
            ;;
        *)
            echo "ERROR: Unknown option ${o}"
            usage
            ;;
    esac
done
shift $((OPTIND-1))

if test -z "${CLUSTER_NAME}"; then
    usage
fi

if test -f .env; then
    source .env
fi

: "${TIMEOUT_IN_MINUTES:=30}"

: "${BOOTSTRAP_CLUSTER_PROVIDER:=kind}"
: "${CNI_PLUGIN:=cilium}"
: "${CONTROL_PLANE_NODE_COUNT:=1}"
: "${WORKER_NODE_COUNT:=2}"
: "${INFRASTRUCTURE_PROVIDER:=docker}"

: "${BOOTSTRAP_PROVIDER:=kubeadm}"
: "${CONTROL_PLANE_PROVIDER:=kubeadm}"

: "${BREAK_AFTER_CLUSTER_TEMPLATE:=false}"
: "${REUSE_CLUSTER_YAML:=false}"

: "${OIDC_AUTH:=false}"

if ! type clusterctl >/dev/null 2>&1; then
    echo "ERROR: clusterctl not found"
    exit 1
fi
if ! type kubectl >/dev/null 2>&1; then
    echo "ERROR: kubectl not found"
    exit 1
fi
if ! type jq >/dev/null 2>&1; then
    echo "ERROR: jq not found"
    exit 1
fi
if ! type yq >/dev/null 2>&1; then
    echo "ERROR: yq not found"
    exit 1
fi

if test -z "${KUBERNETES_VERSION}"; then
    KUBERNETES_VERSION="$(
        kubectl version --client --output json \
        | jq --raw-output ".clientVersion.gitVersion" \
        | tr -d v
    )"
fi

BOOTSTRAP_CLUSTER_NAME="capi-bootstrap-${CLUSTER_NAME}"
if ! test -f "bootstrap/${BOOTSTRAP_CLUSTER_PROVIDER}.sh"; then
    echo "ERROR: Bootstrap provider ${BOOTSTRAP_CLUSTER_PROVIDER} not found"
    exit 1
fi
if ! test -f "provider/${INFRASTRUCTURE_PROVIDER}.sh"; then
    echo "ERROR: Workload provider ${INFRASTRUCTURE_PROVIDER} not found"
    exit 1
fi
if ! test -f "cni/${CNI_PLUGIN}.sh"; then
    echo "ERROR: CNI provider ${CNI_PLUGIN} not found"
    exit 1
fi
source functions.sh
source "bootstrap/${BOOTSTRAP_CLUSTER_PROVIDER}.sh"
source "provider/${INFRASTRUCTURE_PROVIDER}.sh"
source "cni/${CNI_PLUGIN}.sh"

if ! bootstrap_precheck; then
    echo "ERROR: Bootstrap provider precheck failed"
    exit 1
fi
if ! workload_precheck; then
    echo "ERROR: Workload provider precheck failed"
    exit 1
fi

GH_RATE_LIMIT_LEFT="$(github_get_rate_limit)"
if test "${GH_RATE_LIMIT_LEFT}" -lt 10; then
    echo "ERROR: GitHub rate limit too low (${GH_RATE_LIMIT_LEFT} left)"
    exit 1
fi

bootstrap_create "${BOOTSTRAP_CLUSTER_NAME}"
touch kubeconfig-bootstrap
chmod 0600 kubeconfig-bootstrap
bootstrap_kubeconfig "${BOOTSTRAP_CLUSTER_NAME}"
if ! test -f "kubeconfig-bootstrap"; then
    echo "ERROR: kubeconfig-bootstrap not found"
    bootstrap_delete "${BOOTSTRAP_CLUSTER_NAME}"
    exit 1
fi
export KUBECONFIG="kubeconfig-bootstrap"
if ! bootstrap_post_create_hook; then
    echo "ERROR: Failed to execute post create hook."
    bootstrap_delete "${BOOTSTRAP_CLUSTER_NAME}"
    exit 1
fi
if ! kubectl cluster-info; then
    echo "ERROR: Failed to connect to bootstrap cluster"
    bootstrap_delete "${BOOTSTRAP_CLUSTER_NAME}"
    exit 1
fi

bootstrap_cluster_init
if ! bootstrap_post_init_hook; then
    echo "ERROR: Failed to execute post init hook"
    bootstrap_delete "${BOOTSTRAP_CLUSTER_NAME}"
    exit 1
fi
while kubectl get pods -A | tail -n +2 | grep -vqE "(Running|Completed)"; do
    echo "### Waiting for all pods to be running..."
    sleep 10
done

generate_cluster_manifests
workload_post_generate_hook "${CLUSTER_NAME}"

if ${BREAK_AFTER_CLUSTER_TEMPLATE}; then
    echo "### Cluster template generated"
    echo "### To continue with the generated cluster template, run the same command without -t but add -r"
    echo "### To generate a new cluster template and continue, run the same command without -r"
    exit 0
fi

echo "### Rolling out workload cluster"
workload_pre_apply_hook "${CLUSTER_NAME}"
apply_cluster_manifests
workload_post_apply_hook "${CLUSTER_NAME}"
wait_for_control_plane_initialized

echo "### Getting kubeconfig for workload cluster ${CLUSTER_NAME}"
touch "kubeconfig-${CLUSTER_NAME}"
chmod 0600 "kubeconfig-${CLUSTER_NAME}"
clusterctl get kubeconfig "${CLUSTER_NAME}" >"kubeconfig-${CLUSTER_NAME}"

workload_control_plane_initialized_hook "${CLUSTER_NAME}"

echo "### Deploy CNI plugin"
if ! cni_precheck; then
    echo "ERROR: CNI provider precheck failed"
    exit 1
fi
cni_deploy "${CLUSTER_NAME}"

wait_for_control_plane_ready
wait_for_control_plane_nodes_healthy
wait_for_worker_nodes_ready
wait_for_pods_ready

if ! cni_post_install_hook "${CLUSTER_NAME}"; then
    echo "ERROR: CNI provider post install hook failed"
    exit 1
fi

fetch_capi_provider_logs

move_capi_providers

create_long_lived_admin_token

echo "### Removing bootstrap cluster"
bootstrap_delete "${CLUSTER_NAME}"
rm kubeconfig-bootstrap
